import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface AccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "AccessDeniedException";
    $fault: "client";
    Message?: string;
}
export declare namespace AccessDeniedException {
    
    const filterSensitiveLog: (obj: AccessDeniedException) => any;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value?: string;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export interface AddTagsToCertificateRequest {
    
    CertificateArn: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace AddTagsToCertificateRequest {
    
    const filterSensitiveLog: (obj: AddTagsToCertificateRequest) => any;
}

export interface InvalidArnException extends __SmithyException, $MetadataBearer {
    name: "InvalidArnException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidArnException {
    
    const filterSensitiveLog: (obj: InvalidArnException) => any;
}

export interface InvalidParameterException extends __SmithyException, $MetadataBearer {
    name: "InvalidParameterException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidParameterException {
    
    const filterSensitiveLog: (obj: InvalidParameterException) => any;
}

export interface InvalidTagException extends __SmithyException, $MetadataBearer {
    name: "InvalidTagException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidTagException {
    
    const filterSensitiveLog: (obj: InvalidTagException) => any;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    message?: string;
}
export declare namespace ResourceNotFoundException {
    
    const filterSensitiveLog: (obj: ResourceNotFoundException) => any;
}

export interface TagPolicyException extends __SmithyException, $MetadataBearer {
    name: "TagPolicyException";
    $fault: "client";
    message?: string;
}
export declare namespace TagPolicyException {
    
    const filterSensitiveLog: (obj: TagPolicyException) => any;
}

export interface ThrottlingException extends __SmithyException, $MetadataBearer {
    name: "ThrottlingException";
    $fault: "client";
    message?: string;
}
export declare namespace ThrottlingException {
    
    const filterSensitiveLog: (obj: ThrottlingException) => any;
}

export interface TooManyTagsException extends __SmithyException, $MetadataBearer {
    name: "TooManyTagsException";
    $fault: "client";
    message?: string;
}
export declare namespace TooManyTagsException {
    
    const filterSensitiveLog: (obj: TooManyTagsException) => any;
}
export declare enum RecordType {
    CNAME = "CNAME"
}

export interface ResourceRecord {
    
    Name: string | undefined;
    
    Type: RecordType | string | undefined;
    
    Value: string | undefined;
}
export declare namespace ResourceRecord {
    
    const filterSensitiveLog: (obj: ResourceRecord) => any;
}
export declare enum ValidationMethod {
    DNS = "DNS",
    EMAIL = "EMAIL"
}
export declare enum DomainStatus {
    FAILED = "FAILED",
    PENDING_VALIDATION = "PENDING_VALIDATION",
    SUCCESS = "SUCCESS"
}

export interface DomainValidation {
    
    DomainName: string | undefined;
    
    ValidationEmails?: string[];
    
    ValidationDomain?: string;
    
    ValidationStatus?: DomainStatus | string;
    
    ResourceRecord?: ResourceRecord;
    
    ValidationMethod?: ValidationMethod | string;
}
export declare namespace DomainValidation {
    
    const filterSensitiveLog: (obj: DomainValidation) => any;
}
export declare enum ExtendedKeyUsageName {
    ANY = "ANY",
    CODE_SIGNING = "CODE_SIGNING",
    CUSTOM = "CUSTOM",
    EMAIL_PROTECTION = "EMAIL_PROTECTION",
    IPSEC_END_SYSTEM = "IPSEC_END_SYSTEM",
    IPSEC_TUNNEL = "IPSEC_TUNNEL",
    IPSEC_USER = "IPSEC_USER",
    NONE = "NONE",
    OCSP_SIGNING = "OCSP_SIGNING",
    TIME_STAMPING = "TIME_STAMPING",
    TLS_WEB_CLIENT_AUTHENTICATION = "TLS_WEB_CLIENT_AUTHENTICATION",
    TLS_WEB_SERVER_AUTHENTICATION = "TLS_WEB_SERVER_AUTHENTICATION"
}

export interface ExtendedKeyUsage {
    
    Name?: ExtendedKeyUsageName | string;
    
    OID?: string;
}
export declare namespace ExtendedKeyUsage {
    
    const filterSensitiveLog: (obj: ExtendedKeyUsage) => any;
}
export declare enum FailureReason {
    ADDITIONAL_VERIFICATION_REQUIRED = "ADDITIONAL_VERIFICATION_REQUIRED",
    CAA_ERROR = "CAA_ERROR",
    DOMAIN_NOT_ALLOWED = "DOMAIN_NOT_ALLOWED",
    DOMAIN_VALIDATION_DENIED = "DOMAIN_VALIDATION_DENIED",
    INVALID_PUBLIC_DOMAIN = "INVALID_PUBLIC_DOMAIN",
    NO_AVAILABLE_CONTACTS = "NO_AVAILABLE_CONTACTS",
    OTHER = "OTHER",
    PCA_ACCESS_DENIED = "PCA_ACCESS_DENIED",
    PCA_INVALID_ARGS = "PCA_INVALID_ARGS",
    PCA_INVALID_ARN = "PCA_INVALID_ARN",
    PCA_INVALID_DURATION = "PCA_INVALID_DURATION",
    PCA_INVALID_STATE = "PCA_INVALID_STATE",
    PCA_LIMIT_EXCEEDED = "PCA_LIMIT_EXCEEDED",
    PCA_NAME_CONSTRAINTS_VALIDATION = "PCA_NAME_CONSTRAINTS_VALIDATION",
    PCA_REQUEST_FAILED = "PCA_REQUEST_FAILED",
    PCA_RESOURCE_NOT_FOUND = "PCA_RESOURCE_NOT_FOUND",
    SLR_NOT_FOUND = "SLR_NOT_FOUND"
}
export declare enum KeyAlgorithm {
    EC_prime256v1 = "EC_prime256v1",
    EC_secp384r1 = "EC_secp384r1",
    EC_secp521r1 = "EC_secp521r1",
    RSA_1024 = "RSA_1024",
    RSA_2048 = "RSA_2048",
    RSA_3072 = "RSA_3072",
    RSA_4096 = "RSA_4096"
}
export declare enum KeyUsageName {
    ANY = "ANY",
    CERTIFICATE_SIGNING = "CERTIFICATE_SIGNING",
    CRL_SIGNING = "CRL_SIGNING",
    CUSTOM = "CUSTOM",
    DATA_ENCIPHERMENT = "DATA_ENCIPHERMENT",
    DECIPHER_ONLY = "DECIPHER_ONLY",
    DIGITAL_SIGNATURE = "DIGITAL_SIGNATURE",
    ENCHIPER_ONLY = "ENCIPHER_ONLY",
    KEY_AGREEMENT = "KEY_AGREEMENT",
    KEY_ENCIPHERMENT = "KEY_ENCIPHERMENT",
    NON_REPUDATION = "NON_REPUDIATION"
}

export interface KeyUsage {
    
    Name?: KeyUsageName | string;
}
export declare namespace KeyUsage {
    
    const filterSensitiveLog: (obj: KeyUsage) => any;
}
export declare enum CertificateTransparencyLoggingPreference {
    DISABLED = "DISABLED",
    ENABLED = "ENABLED"
}

export interface CertificateOptions {
    
    CertificateTransparencyLoggingPreference?: CertificateTransparencyLoggingPreference | string;
}
export declare namespace CertificateOptions {
    
    const filterSensitiveLog: (obj: CertificateOptions) => any;
}
export declare enum RenewalEligibility {
    ELIGIBLE = "ELIGIBLE",
    INELIGIBLE = "INELIGIBLE"
}
export declare enum RenewalStatus {
    FAILED = "FAILED",
    PENDING_AUTO_RENEWAL = "PENDING_AUTO_RENEWAL",
    PENDING_VALIDATION = "PENDING_VALIDATION",
    SUCCESS = "SUCCESS"
}

export interface RenewalSummary {
    
    RenewalStatus: RenewalStatus | string | undefined;
    
    DomainValidationOptions: DomainValidation[] | undefined;
    
    RenewalStatusReason?: FailureReason | string;
    
    UpdatedAt: Date | undefined;
}
export declare namespace RenewalSummary {
    
    const filterSensitiveLog: (obj: RenewalSummary) => any;
}
export declare enum RevocationReason {
    AFFILIATION_CHANGED = "AFFILIATION_CHANGED",
    A_A_COMPROMISE = "A_A_COMPROMISE",
    CA_COMPROMISE = "CA_COMPROMISE",
    CERTIFICATE_HOLD = "CERTIFICATE_HOLD",
    CESSATION_OF_OPERATION = "CESSATION_OF_OPERATION",
    KEY_COMPROMISE = "KEY_COMPROMISE",
    PRIVILEGE_WITHDRAWN = "PRIVILEGE_WITHDRAWN",
    REMOVE_FROM_CRL = "REMOVE_FROM_CRL",
    SUPERCEDED = "SUPERCEDED",
    UNSPECIFIED = "UNSPECIFIED"
}
export declare enum CertificateStatus {
    EXPIRED = "EXPIRED",
    FAILED = "FAILED",
    INACTIVE = "INACTIVE",
    ISSUED = "ISSUED",
    PENDING_VALIDATION = "PENDING_VALIDATION",
    REVOKED = "REVOKED",
    VALIDATION_TIMED_OUT = "VALIDATION_TIMED_OUT"
}
export declare enum CertificateType {
    AMAZON_ISSUED = "AMAZON_ISSUED",
    IMPORTED = "IMPORTED",
    PRIVATE = "PRIVATE"
}

export interface CertificateDetail {
    
    CertificateArn?: string;
    
    DomainName?: string;
    
    SubjectAlternativeNames?: string[];
    
    DomainValidationOptions?: DomainValidation[];
    
    Serial?: string;
    
    Subject?: string;
    
    Issuer?: string;
    
    CreatedAt?: Date;
    
    IssuedAt?: Date;
    
    ImportedAt?: Date;
    
    Status?: CertificateStatus | string;
    
    RevokedAt?: Date;
    
    RevocationReason?: RevocationReason | string;
    
    NotBefore?: Date;
    
    NotAfter?: Date;
    
    KeyAlgorithm?: KeyAlgorithm | string;
    
    SignatureAlgorithm?: string;
    
    InUseBy?: string[];
    
    FailureReason?: FailureReason | string;
    
    Type?: CertificateType | string;
    
    RenewalSummary?: RenewalSummary;
    
    KeyUsages?: KeyUsage[];
    
    ExtendedKeyUsages?: ExtendedKeyUsage[];
    
    CertificateAuthorityArn?: string;
    
    RenewalEligibility?: RenewalEligibility | string;
    
    Options?: CertificateOptions;
}
export declare namespace CertificateDetail {
    
    const filterSensitiveLog: (obj: CertificateDetail) => any;
}
export interface DeleteCertificateRequest {
    
    CertificateArn: string | undefined;
}
export declare namespace DeleteCertificateRequest {
    
    const filterSensitiveLog: (obj: DeleteCertificateRequest) => any;
}

export interface ResourceInUseException extends __SmithyException, $MetadataBearer {
    name: "ResourceInUseException";
    $fault: "client";
    message?: string;
}
export declare namespace ResourceInUseException {
    
    const filterSensitiveLog: (obj: ResourceInUseException) => any;
}
export interface DescribeCertificateRequest {
    
    CertificateArn: string | undefined;
}
export declare namespace DescribeCertificateRequest {
    
    const filterSensitiveLog: (obj: DescribeCertificateRequest) => any;
}
export interface DescribeCertificateResponse {
    
    Certificate?: CertificateDetail;
}
export declare namespace DescribeCertificateResponse {
    
    const filterSensitiveLog: (obj: DescribeCertificateResponse) => any;
}
export interface ExportCertificateRequest {
    
    CertificateArn: string | undefined;
    
    Passphrase: Uint8Array | undefined;
}
export declare namespace ExportCertificateRequest {
    
    const filterSensitiveLog: (obj: ExportCertificateRequest) => any;
}
export interface ExportCertificateResponse {
    
    Certificate?: string;
    
    CertificateChain?: string;
    
    PrivateKey?: string;
}
export declare namespace ExportCertificateResponse {
    
    const filterSensitiveLog: (obj: ExportCertificateResponse) => any;
}

export interface RequestInProgressException extends __SmithyException, $MetadataBearer {
    name: "RequestInProgressException";
    $fault: "client";
    message?: string;
}
export declare namespace RequestInProgressException {
    
    const filterSensitiveLog: (obj: RequestInProgressException) => any;
}

export interface ExpiryEventsConfiguration {
    
    DaysBeforeExpiry?: number;
}
export declare namespace ExpiryEventsConfiguration {
    
    const filterSensitiveLog: (obj: ExpiryEventsConfiguration) => any;
}
export interface GetAccountConfigurationResponse {
    
    ExpiryEvents?: ExpiryEventsConfiguration;
}
export declare namespace GetAccountConfigurationResponse {
    
    const filterSensitiveLog: (obj: GetAccountConfigurationResponse) => any;
}
export interface GetCertificateRequest {
    
    CertificateArn: string | undefined;
}
export declare namespace GetCertificateRequest {
    
    const filterSensitiveLog: (obj: GetCertificateRequest) => any;
}
export interface GetCertificateResponse {
    
    Certificate?: string;
    
    CertificateChain?: string;
}
export declare namespace GetCertificateResponse {
    
    const filterSensitiveLog: (obj: GetCertificateResponse) => any;
}
export interface ImportCertificateRequest {
    
    CertificateArn?: string;
    
    Certificate: Uint8Array | undefined;
    
    PrivateKey: Uint8Array | undefined;
    
    CertificateChain?: Uint8Array;
    
    Tags?: Tag[];
}
export declare namespace ImportCertificateRequest {
    
    const filterSensitiveLog: (obj: ImportCertificateRequest) => any;
}
export interface ImportCertificateResponse {
    
    CertificateArn?: string;
}
export declare namespace ImportCertificateResponse {
    
    const filterSensitiveLog: (obj: ImportCertificateResponse) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    message?: string;
}
export declare namespace LimitExceededException {
    
    const filterSensitiveLog: (obj: LimitExceededException) => any;
}

export interface InvalidArgsException extends __SmithyException, $MetadataBearer {
    name: "InvalidArgsException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidArgsException {
    
    const filterSensitiveLog: (obj: InvalidArgsException) => any;
}

export interface Filters {
    
    extendedKeyUsage?: (ExtendedKeyUsageName | string)[];
    
    keyUsage?: (KeyUsageName | string)[];
    
    keyTypes?: (KeyAlgorithm | string)[];
}
export declare namespace Filters {
    
    const filterSensitiveLog: (obj: Filters) => any;
}
export interface ListCertificatesRequest {
    
    CertificateStatuses?: (CertificateStatus | string)[];
    
    Includes?: Filters;
    
    NextToken?: string;
    
    MaxItems?: number;
}
export declare namespace ListCertificatesRequest {
    
    const filterSensitiveLog: (obj: ListCertificatesRequest) => any;
}

export interface CertificateSummary {
    
    CertificateArn?: string;
    
    DomainName?: string;
}
export declare namespace CertificateSummary {
    
    const filterSensitiveLog: (obj: CertificateSummary) => any;
}
export interface ListCertificatesResponse {
    
    NextToken?: string;
    
    CertificateSummaryList?: CertificateSummary[];
}
export declare namespace ListCertificatesResponse {
    
    const filterSensitiveLog: (obj: ListCertificatesResponse) => any;
}
export interface ListTagsForCertificateRequest {
    
    CertificateArn: string | undefined;
}
export declare namespace ListTagsForCertificateRequest {
    
    const filterSensitiveLog: (obj: ListTagsForCertificateRequest) => any;
}
export interface ListTagsForCertificateResponse {
    
    Tags?: Tag[];
}
export declare namespace ListTagsForCertificateResponse {
    
    const filterSensitiveLog: (obj: ListTagsForCertificateResponse) => any;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    message?: string;
}
export declare namespace ConflictException {
    
    const filterSensitiveLog: (obj: ConflictException) => any;
}
export interface PutAccountConfigurationRequest {
    
    ExpiryEvents?: ExpiryEventsConfiguration;
    
    IdempotencyToken: string | undefined;
}
export declare namespace PutAccountConfigurationRequest {
    
    const filterSensitiveLog: (obj: PutAccountConfigurationRequest) => any;
}

export interface ValidationException extends __SmithyException, $MetadataBearer {
    name: "ValidationException";
    $fault: "client";
    message?: string;
}
export declare namespace ValidationException {
    
    const filterSensitiveLog: (obj: ValidationException) => any;
}
export interface RemoveTagsFromCertificateRequest {
    
    CertificateArn: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace RemoveTagsFromCertificateRequest {
    
    const filterSensitiveLog: (obj: RemoveTagsFromCertificateRequest) => any;
}
export interface RenewCertificateRequest {
    
    CertificateArn: string | undefined;
}
export declare namespace RenewCertificateRequest {
    
    const filterSensitiveLog: (obj: RenewCertificateRequest) => any;
}

export interface InvalidDomainValidationOptionsException extends __SmithyException, $MetadataBearer {
    name: "InvalidDomainValidationOptionsException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidDomainValidationOptionsException {
    
    const filterSensitiveLog: (obj: InvalidDomainValidationOptionsException) => any;
}

export interface DomainValidationOption {
    
    DomainName: string | undefined;
    
    ValidationDomain: string | undefined;
}
export declare namespace DomainValidationOption {
    
    const filterSensitiveLog: (obj: DomainValidationOption) => any;
}
export interface RequestCertificateRequest {
    
    DomainName: string | undefined;
    
    ValidationMethod?: ValidationMethod | string;
    
    SubjectAlternativeNames?: string[];
    
    IdempotencyToken?: string;
    
    DomainValidationOptions?: DomainValidationOption[];
    
    Options?: CertificateOptions;
    
    CertificateAuthorityArn?: string;
    
    Tags?: Tag[];
}
export declare namespace RequestCertificateRequest {
    
    const filterSensitiveLog: (obj: RequestCertificateRequest) => any;
}
export interface RequestCertificateResponse {
    
    CertificateArn?: string;
}
export declare namespace RequestCertificateResponse {
    
    const filterSensitiveLog: (obj: RequestCertificateResponse) => any;
}

export interface InvalidStateException extends __SmithyException, $MetadataBearer {
    name: "InvalidStateException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidStateException {
    
    const filterSensitiveLog: (obj: InvalidStateException) => any;
}
export interface ResendValidationEmailRequest {
    
    CertificateArn: string | undefined;
    
    Domain: string | undefined;
    
    ValidationDomain: string | undefined;
}
export declare namespace ResendValidationEmailRequest {
    
    const filterSensitiveLog: (obj: ResendValidationEmailRequest) => any;
}
export interface UpdateCertificateOptionsRequest {
    
    CertificateArn: string | undefined;
    
    Options: CertificateOptions | undefined;
}
export declare namespace UpdateCertificateOptionsRequest {
    
    const filterSensitiveLog: (obj: UpdateCertificateOptionsRequest) => any;
}
